#!/usr/bin/env python
# -*- coding: utf-8 -*-

from itertools import count
from z3 import * # pip install --user z3-solver

def h(s):
    state = 0x0123456789abcdef
    mask = (1 << 64) - 1
    for ch in map(ord, s):
        state = (state + ch) & mask
        state = (state ^ 0xbadc0de) & mask
        state = (state >> 30) | ((state << 34) & mask)
        state = (state - ch) & mask
        state = (3 * state) & mask
    return state

def h_symbolic(slen):
    state = BitVecVal(0x0123456789abcdef, 64)
    s = BitVecs(' '.join(f'b{i}' for i in range(slen)), 8)
    for ch in s:
        state = state + ZeroExt(56, ch)
        state = state ^ BitVecVal(0xbadc0de, 64)
        state = LShR(state, 30) | (state << 34)
        state = state - ZeroExt(56, ch)
        state = state * BitVecVal(3, 64)
    return state, s

def second_preimages(string):
    hashed = h(string)
    print(string, '=>', hashed)
    for slen in count(start=1):
        print(f'Trying keys of length {slen}...')
        solver = Solver()
        state, syms = h_symbolic(slen)
        solver.add(state == BitVecVal(hashed, 64))
        for sym in syms:
            solver.add(33 <= sym)
            solver.add(sym <= 126)
        while solver.check() == sat:
            m = solver.model()
            yield ''.join(chr(m[sym].as_long()) for sym in syms)
            solver.add(Or([sym != m[sym] for sym in syms]))

for key in second_preimages('flag'):
    print(key)

# @l}9)(RP&j
# hi3HDHz@ex8
# Z(0ac+']VA`|
