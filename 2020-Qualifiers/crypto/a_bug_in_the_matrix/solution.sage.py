

# This file was *autogenerated* from the file solution.sage
from sage.all_cmdline import *   # import sage library

_sage_const_2 = Integer(2); _sage_const_512 = Integer(512); _sage_const_1337 = Integer(1337); _sage_const_16 = Integer(16); _sage_const_4 = Integer(4); _sage_const_1 = Integer(1)#!/usr/bin/sage

# Run `PWNLIB_NOTERM=true sage solution.sage` if curses crash

from pwn import *
from Crypto.Util.number import *
import progressbar
#context.log_level = 'debug'

GF2 = GF(_sage_const_2 )
blockSize = int(_sage_const_512 )

conn = remote("54.72.64.138", _sage_const_1337 )

conn.recvline()
def getEncryptedLine(conn):
    return vector(GF2, [int(y) for y in ('{0:0'+str(blockSize)+'b}').format(int(conn.recvline().strip(), _sage_const_16 ))])

encFlag = getEncryptedLine(conn)

conn.recvline()
conn.sendline('0')
offset = getEncryptedLine(conn)

vectors = []
print("Constructing ciphertext basis")
for i in range(blockSize):
    conn.recvline()

    conn.sendline(('{0:0'+str(blockSize/_sage_const_4 )+'x}').format(int('1' + '0' * (blockSize - i - int(_sage_const_1 )), _sage_const_2 )))
    vectors += [ getEncryptedLine(conn) - offset ]

print("Solving linear equation")
# Solving linear equation
m = matrix(GF2, vectors).transpose()
plaintext = m.solve_right(encFlag - offset)

# Transform bitvector to flag
plaintext = ''.join(map(str, plaintext))
plaintext = long_to_bytes(int(plaintext, _sage_const_2 ))
print(plaintext)



